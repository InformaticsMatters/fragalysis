### DSIP loading

# TODO create db create scripts

conda activate fairmols
cd github/im/fragalysis/


# standardisation
# TODO improve the ergonomics of standardisation
# TODO include RAC in the output

python -m frag.network.scripts.standardise_xchem_compounds /data/xchem dsip /data/xchem/standardised

gunzip /data/xchem/standardised/standardised-compounds.tab.gz

# load standardised data
# TODO include RAC column and handle import. Ends up in nonisomol table
DROP TABLE i_mols;
CREATE TABLE i_mols (
  osmiles TEXT,
  isosmiles TEXT,
  nonisosmiles TEXT,
  hac SMALLINT,
  rac SMALLINT,
  cmpd_id TEXT,
  isomol_id INTEGER,
  nonisomol_id INTEGER
);

\COPY i_mols(osmiles, isosmiles, nonisosmiles, hac, cmpd_id) FROM '/data/xchem/standardised/standardised-compounds.tab' CSV DELIMITER E'\t' HEADER;

INSERT INTO nonisomol (smiles, hac, rac)
  SELECT nonisosmiles, hac, rac from i_mols
  ON CONFLICT ON CONSTRAINT nonisomol_smiles_key DO NOTHING;

UPDATE i_mols i SET nonisomol_id = n.id
  FROM nonisomol n
    WHERE n.smiles = i.nonisosmiles;

INSERT INTO isomol (smiles, nonisomol_id)
  SELECT isosmiles, nonisomol_id from i_mols
  WHERE isosmiles != nonisosmiles
  ON CONFLICT ON CONSTRAINT isomol_smiles_key DO NOTHING;

UPDATE i_mols i SET isomol_id = iso.id
  FROM isomol iso
    WHERE iso.smiles = i.isosmiles;

INSERT INTO mol_source (smiles, code, source_id, nonisomol_id, isomol_id)
  (SELECT osmiles, cmpd_id, 6, nonisomol_id, isomol_id FROM i_mols);


### fragmentation

\COPY (SELECT n.smiles FROM nonisomol n WHERE NOT EXISTS (SELECT 1 FROM edge e WHERE e.parent_id = n.id)) TO '/data/xchem/nonisomol.smi';

# this creates nodes.csv and edges.csv in /data/network/dsip/
# TODO improve the ergonomics of fragmentation
time python -m frag.network.scripts.build_db_from_smiles --input /data/xchem/nonisomol.smi --base_dir /data/xchem/

# import the nodes

DROP TABLE i_edge;
DROP TABLE i_node;

CREATE TABLE i_node (
  smiles TEXT,
  nonisomol_id INTEGER,
  hac SMALLINT,
  rac SMALLINT,
  child_count INTEGER,
  edge_count INTEGER,
  ftime INTEGER
);

CREATE TABLE i_edge (
  p_smiles TEXT,
  c_smiles TEXT,
  present BOOLEAN,
  label TEXT
);


\COPY i_node(smiles, hac, rac, child_count, edge_count, ftime) FROM '/data/xchem/nodes.csv' DELIMITER ',' CSV;

UPDATE i_node i SET nonisomol_id = n.id
  FROM nonisomol n WHERE n.smiles = i.smiles;

INSERT INTO nonisomol (smiles, hac, rac, child_count, edge_count, ftime)
  SELECT smiles, hac, rac, child_count, edge_count, ftime FROM i_node
  WHERE nonisomol_id IS NULL;

-- this next query needs optimising
WITH s AS (SELECT i.nonisomol_id, i.child_count, i.edge_count, i.ftime FROM i_node i
  JOIN nonisomol n ON n.id = i.nonisomol_id
  WHERE i.nonisomol_id = n.id AND i.nonisomol_id IS NOT NULL)
UPDATE nonisomol n SET child_count = s.child_count, edge_count = s.edge_count, ftime = s.ftime FROM s
  WHERE s.nonisomol_id = n.id;

\COPY i_edge(p_smiles, c_smiles, label) FROM '/data/xchem/edges.csv' DELIMITER ',' CSV

UPDATE i_edge i SET present = TRUE WHERE EXISTS
  (SELECT 1 FROM edge e 
  JOIN nonisomol np ON np.id = e.parent_id 
  JOIN nonisomol nc ON nc.id = e.child_id 
  WHERE i.p_smiles = np.smiles AND i.c_smiles = nc.smiles);

SELECT present, count(*) FROM i_edge GROUP BY present;

INSERT INTO edge (parent_id, child_id, label)
  SELECT np.id, nc.id, i.label FROM i_edge i
    JOIN nonisomol np ON np.smiles = i.p_smiles 
    JOIN nonisomol nc ON nc.smiles = i.c_smiles
    WHERE i.present IS NULL;

# TODO create a db dump





